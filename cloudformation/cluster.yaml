# aws --profile talos cloudformation create-stack --stack-name tanslator-scale --template-body file://<(cfn-flip cluster.yaml) --capabilities CAPABILITY_IAM
# aws --profile talos cloudformation update-stack --stack-name tanslator-scale --template-body file://<(cfn-flip cluster.yaml) --capabilities CAPABILITY_IAM
# aws cloudformation create-stack --stack-name ECS-Scale --template-body file://<(cfn-flip cluster.yaml) --parameters ParameterKey=SERVICENAME,ParameterValue=linkScraper ParameterKey=REPOSITORIE,ParameterValue=https://github.com/talosinsights/search-link-scraper.git ParameterKey=STAGE,ParameterValue=qa

AWSTemplateFormatVersion: 2010-09-09
Description: "ECS Cluster with Task for lambda scaling"

Parameters:
  STAGE:
    Type: String
    Description: STAGE of app, enter prod or qa
    AllowedValues:
      - prod
      - qa
    Default: qa
  SERVICENAME:
    Type: String
    Description: Service name
    Default: insight
  MODULE:
    Type: String
    Description: module name
    Default: translator
  CONTAINERCPU:
      Type: Number
      Default: 2048
      Description: How much CPU to give the container. 1024 is 1 CPU
  CONTAINERMEMORY:
      Type: Number
      Default: 4096
      Description: How much memory in megabytes to give the container
  IMAGEURL:
    Type: String
    Default: 479820582087.dkr.ecr.eu-central-1.amazonaws.com/translator:latest
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  DESIREDCOUNT:
      Type: Number
      Default: 0
      Description: How much Task will be started

Mappings:
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/24'
    PublicTwo:
      CIDR: '10.0.1.0/24'
    PrivateOne:
      CIDR: '10.0.2.0/24'
    PrivateTwo:
      CIDR: '10.0.3.0/24'

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName:
        !Join [
          "-",
          [
            "talos",
            "ecs",
            "cluster",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE,
          ],
        ]
  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DesiredCount: !Ref DESIREDCOUNT
      EnableECSManagedTags: false
      LaunchType: FARGATE
      # SchedulingStrategy: DAEMON
      ServiceName:
        !Join [
          "-",
          [
            "talos",
            "ecs",
            "service",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE
          ]
        ]
      TaskDefinition: !Ref ECSTaskdefintion #required
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          # AssignPublicIp: ENABLED
          Subnets:
            - !Ref ECSSubnetOne
            - !Ref ECSSubnetTwo
          SecurityGroups:
            - !Ref ECSSecurityGroup

  ECSTaskdefintion:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: !Join [
          "-",
          [
            "talos",
            "ecs",
            "containerdefintion",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE
          ]
        ]
          # MountPoints:
          #   - SourceVolume: "model"
          #     ContainerPath: "/models"
          Image: !Ref IMAGEURL
          Cpu: !Ref CONTAINERCPU
          Memory: !Ref CONTAINERMEMORY
          Environment:
            - Name: region
              Value: !Ref "AWS::Region"
            - Name: accountId
              Value: !Ref "AWS::AccountId"
            - Name: bucket
              Value:
                Fn::ImportValue: !Join ["-",["talos-s3-bucketname-snap-insight-translator",!Ref STAGE]]
            - Name: bucket_path
              Value: articles
            - Name: sqs_queue
              Value: 
                Fn::ImportValue: !Join ["-",["talos-sqs-url-snap-insight-translator",!Ref STAGE]]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSCloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: test
      Cpu: !Ref CONTAINERCPU
      Memory: !Ref CONTAINERMEMORY
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn

  ECSCloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["/",["",!Ref AWS::StackName ,!Ref SERVICENAME ,!Ref MODULE]] 
      RetentionInDays: 365

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: 
              - "ec2.amazonaws.com"
              - "ecs-tasks.amazonaws.com"
              - "ecs.amazonaws.com"
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - "ecr:InitiateLayerUpload"
                - "ecr:UploadLayerPart"
                - "ecr:CompleteLayerUpload"
 
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
                - "ecs-tasks.amazonaws.com"
                - "ecs.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
    Description: ECS-Execution Role
  ECSTaskRolePolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
   
          -
            Effect: Allow
            Action:
              - logs:*
            Resource:
              "arn:aws:logs:*:*:*"
          -
            Effect: Allow
            Action:
              - sqs:*
            Resource: 
              Fn::ImportValue: !Join ["-",["talos-sqs-arn-snap-insight-translator",!Ref STAGE]]     
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              Fn::ImportValue: !Join ["-",["talos-s3-arn-snap-insight-translator",!Ref STAGE]]
      Roles: 
        - !Ref ECSTaskRole

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref SERVICENAME, ContainerSecurityGroup]]
      VpcId: !Ref ECSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          # SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  ECSVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  ECSSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref ECSVPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  ECSSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref ECSVPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']
  ECSPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref ECSVPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  ECSPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref ECSVPC
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ECSVPC
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSPublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref ECSPublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref ECSPublicSubnetTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref ECSSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref ECSSubnetTwo


Outputs:
  ECSCluster:
    Description: "ARN of new ECS Cluster"
    Value: !GetAtt ECSCluster.Arn
    Export:
      Name: !Join ["-", ["ECSCluster", "ARN", !Ref SERVICENAME, !Ref STAGE]]
  ECSService:
    Description: "arn of new ECS Service"
    Value: !Ref ECSService
    Export:
      Name: !Join ["-", ["ECSService", "ARN", !Ref SERVICENAME, !Ref STAGE]]
  ECSTaskdefintion:
    Description: "Arn of new ECS Taskdefinition"
    Value:  !Ref ECSTaskdefintion
    Export:
      Name: !Join ["-", ["ECSTaskdefintion", "ARN", !Ref SERVICENAME, !Ref STAGE]]