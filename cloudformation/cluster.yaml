# aws --profile talos cloudformation create-stack --stack-name tanslator-scale --template-body file://<(cfn-flip cluster.yaml) --capabilities CAPABILITY_IAM
# aws --profile talos cloudformation update-stack --stack-name tanslator-scale --template-body file://<(cfn-flip cluster.yaml) --capabilities CAPABILITY_IAM
# aws cloudformation create-stack --stack-name ECS-Scale --template-body file://<(cfn-flip cluster.yaml) --parameters ParameterKey=SERVICENAME,ParameterValue=linkScraper ParameterKey=REPOSITORIE,ParameterValue=https://github.com/talosinsights/search-link-scraper.git ParameterKey=STAGE,ParameterValue=qa

AWSTemplateFormatVersion: 2010-09-09
Description: "ECS Cluster with Task for lambda scaling"

Parameters:
  STAGE:
    Type: String
    Description: STAGE of app, enter prod or qa
    AllowedValues:
      - prod
      - qa
    Default: qa
  SERVICENAME:
    Type: String
    Description: Service name
    Default: insight
  MODULE:
    Type: String
    Description: module name
    Default: translator

Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName:
        !Join [
          "-",
          [
            "talos",
            "ecs",
            "cluster",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE,
          ],
        ]
  ECSService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DesiredCount: 0
      EnableECSManagedTags: false
      LaunchType: EC2
      # SchedulingStrategy: DAEMON
      ServiceName:
        !Join [
          "-",
          [
            "talos",
            "ecs",
            "service",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE
          ]
        ]
      TaskDefinition: !Ref ECSTaskdefintion #required
  ECSTaskdefintion:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: !Join [
          "-",
          [
            "talos",
            "ecs",
            "containerdefintion",
            !Ref SERVICENAME,
            !Ref MODULE,
            !Ref STAGE
          ]
        ]
          # MountPoints:
          #   - SourceVolume: "model"
          #     ContainerPath: "/models"
          Image: hello-world
          Essential: "true"
      Cpu: "256"
      Memory: "256"
      RequiresCompatibilities:
        - EC2
      TaskRoleArn: !GetAtt IAMRole.Arn
      # Volumes:
      #   -
      #     Host:
      #       SourcePath: "/var/lib/docker/vfs/dir/"
      #     Name: "model"

  IAMRole:
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
    Description: ECS-Execution Role
  RolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: "root"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          -
            Effect: Allow
            Action:
              - sqs:*
            Resource: 
              Fn::ImportValue: !Join ["-",["talos-sqs-arn-snap-insight-translator",!Ref STAGE]]
          -
            Effect: Allow
            Action:
              - s3:*
            Resource:
              Fn::ImportValue: !Join ["-",["talos-s3-arn-snap-insight-translator",!Ref STAGE]]
      Roles: 
        - !Ref IAMRole

# Outputs:
# Export SQS-data
# ECSCluster:
#   Description: "Name of new Dynamo Table"
#   Value: !Ref InsightDynamoDb
#   Export:
#     Name: !Join ["-", ["DYNAMO", "URL", !Ref SERVICENAME, !Ref STAGE]]
